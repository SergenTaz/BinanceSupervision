import csv, re
import pandas as pd

from BinanceSupervision.models.Model_PureTransactionHistory import Model_PureTransactionHistory
from BinanceSupervision.models.Model_PureTransaction import Model_PureTransaction

class Ctrl_FileParser():
    def __init__(self):
        pass

    # def parseOrderHistory(self,path):
    #     try :
    #         with open(path, newline='') as file:
    #             dialect = csv.Sniffer().sniff(file.read(1024), delimiters=";,")
    #             file.seek(0)
    #             spamreader = csv.reader(file, dialect)
    #
    #             header = spamreader.__next__()
    #
    #             dateIndex = self.getHeaderIndex(header,"Date(UTC)")
    #             pairIndex = header.index("Pair")
    #             sideIndex = header.index("Side")
    #             priceIndex = header.index("Price")
    #             executedIndex = header.index("Executed")
    #             amountIndex = header.index("Amount")
    #             feeIndex = header.index("Fee")
    #
    #             for row in spamreader:
    #
    #                 date = row[dateIndex]
    #                 operation = row[sideIndex]
    #
    #                 if (operation == "BUY"):  # If the action is a buy
    #                     tokenearned = re.sub(r'[^a-zA-Z]','',row[executedIndex])
    #                     amountearned = float(re.sub(r'[^0-9.]','',row[executedIndex]))
    #                     tokenused = re.sub(r'[^a-zA-Z]', '', row[amountIndex])
    #                     amountused = float(re.sub(r'[^0-9.]', '', row[amountIndex]))
    #
    #                     self.history.addTransaction(
    #                          Model_transaction(date, operation, tokenused, amountused, tokenearned, amountearned))
    #                 elif operation=="SELL":
    #                     tokenearned = re.sub(r'[^a-zA-Z]', '', row[amountIndex])
    #                     amountearned = float(re.sub(r'[^0-9.]', '', row[amountIndex]))
    #                     tokenused = re.sub(r'[^a-zA-Z]', '', row[executedIndex])
    #                     amountused = float(re.sub(r'[^0-9.]', '', row[executedIndex]))
    #
    #                     self.history.addTransaction(
    #                         Model_transaction(date, operation, tokenused, amountused, tokenearned, amountearned))
    #
    #         h=self.history.gettransactionHistorySortedByDate()
    #         print("----------Your history----------")
    #         h.__str__()
    #         return self.getHistory()
    #     except Exception:
    #         print("Please be sur to use a csv file which is a trades history generated by Binance. (Ordres -> Ordre Spot -> Historique des trades -> Export)")


    def parseTransactionHistoryFile(self,path):
        if path.endswith('.csv'): #TODO
            with open(path, newline='') as file:
                dialect = csv.Sniffer().sniff(file.read(1024), delimiters=";,")
                file.seek(0)
                spamreader = csv.reader(file, dialect)

                header = spamreader.__next__()
                dateIndex = header.index("UTC_Time")
                operationIndex = header.index("Operation")
                accountIndex = header.index("Account")
                coinIndex = header.index("Coin")
                changeIndex= header.index("Change")

                self.history = Model_PureTransactionHistory()

                for row in spamreader:
                    date = row[dateIndex]
                    account = row[accountIndex]
                    operation = row[operationIndex]
                    coin = row[coinIndex]
                    change = row[changeIndex]

                    self.history.addTransaction(Model_PureTransaction(date,account,operation,coin,change))

        elif path.endswith(".xlsx"): #TODO
            print("xlsx")
            xl_file = pd.read_excel(open(path, 'rb'))

            for l in xl_file.to_numpy():
                print(l)
            print(xl_file.to_numpy())

        return self.getHistory()

    def readDB(self):   #TODO
        pass

    def getHistory(self):
        return self.history

    def getHeaderIndex(self,header,string):
        for h in header:
            if string in h:
                return header.index(h)


